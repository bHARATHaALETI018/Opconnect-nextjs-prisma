generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------------------user-----------------------------------
enum UserRole {
  STUDENT
  ADMIN
  MENTOR
  GUEST
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  idNumber      String?   @unique
  image         String?
  password      String?
  role          UserRole  @default(GUEST)
  accounts      Account[]

  profile Profile?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// ---------------------------------------VerificationToken-----------------------------------
model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// ---------------------------------------PasswordResetToken-----------------------------------
model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// ---------------------------------------Opportunity-----------------------------------
enum OpportunityStatus {
  Pending
  Applied
  Processing
  NoResponse
  Selected
  Rejected
}

enum OpportunityType {
  OffCampus
  OnCampus
}

model Opportunity {
  id          Int               @id @default(autoincrement())
  type        OpportunityType
  jobTitle    String?
  link        String?
  company     String?
  status      OpportunityStatus @default(Pending)
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

// ---------------------------------------Profile-----------------------------------
model Ssc {
  certificate  String  @unique
  schoolName   String
  academicYear String?
  yearOfPass   String
  grades       String

  profileId String  @unique
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Intermediate {
  collegeName  String
  academicYear String?
  yearOfPass   String
  grades       String
  certificate  String  @unique

  profileId String  @unique
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Graduation {
  collegeName  String
  academicYear String?
  yearOfPass   String?
  cgpa         String?
  certificate  String? @unique

  profileId String  @unique
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model PostGraduation {
  collegeName  String?
  academicYear String?
  yearOfPass   String?
  cgpa         String?
  certificate  String? @unique

  profileId String  @unique
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Address {
  country     String
  state       String
  city        String
  pincode     String
  landmark    String?
  houseNumber String?

  profileId String  @unique
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Profile {
  id              String          @id @default(cuid())
  firstName       String
  lastName        String
  rollNumber      String          @unique
  phone           String          @unique
  dateOfBirth     String?
  currentSemester String?
  gender          String
  ssc             Ssc?
  inter           Intermediate?
  graduation      Graduation?
  postGraduation  PostGraduation?
  academicYear    String?
  branch          String?
  course          String?
  section         String?
  personalEmail   String?         @unique
  email           String?         @unique
  resume          String?
  address         Address?
  profilePicture  String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String          @unique
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([firstName, lastName])
  @@unique([firstName, lastName, dateOfBirth])
}
